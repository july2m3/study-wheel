{"version":3,"sources":["Collapse.tsx","Title.tsx","FormItem.tsx","Form.tsx","canvasFunctions.tsx","App.tsx","index.tsx"],"names":["showHide","console","log","document","querySelector","classList","toggle","Collapse","props","className","onClick","children","Title","title","FormItem","type","name","placeholder","option","Form","handleSubmit","e","preventDefault","form","formData","FormData","updatedOptions","i","optionsArray","length","push","get","toString","handleInputChange","target","value","setState","state","bind","id","this","map","index","key","addOption","icon","faPlus","React","Component","drawWheel","ctx","beginPath","x","window","innerWidth","y","innerHeight","size","strokeStyle","arc","Math","PI","stroke","drawPicker","canvas","width","height","fillStyle","moveTo","lineTo","fill","drawLines","angle1","angle2","r","circleX","cos","circleY","sin","drawText","text","labelX","angle","color","font","save","translate","rotate","textAlign","fillText","restore","drawOptions","options","oldAngle","colors","startAngle","j","trunc","currentAngle","App","setTimeout","draw","handleKeyDown","event","keyCode","spinWheel","getContext","Object","values","updateAppOptions","optionName","optionValue","data","wheelSpin","spins","random","clearInterval","setInterval","clearRect","handleFormSubmit","colorOptions","test","addEventListener","colorArray","newColor","floor","faBars","updateApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f4334c12.chunk.js","sourcesContent":["import React from 'react';\n\nconst showHide = () => {\n  console.log('collapsing stuff...');\n  let form = document.querySelector('.form');\n  //   let form = document.getElementById('form');\n  //   let form = document.querySelector<HTMLInputElement>('.form');\n  //   console.log(typeof form);\n  form.classList.toggle('hide');\n  //   form.\n};\n\nfunction Collapse(props: any) {\n  return (\n    <div className=\"collapse\" onClick={showHide}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Collapse;\n","import React from 'react';\n\nfunction Title(props: any) {\n  return <h1 className=\"title\">{props.title}</h1>;\n}\n\nexport default Title;\n","import React from 'react';\n\nfunction FormItem(props) {\n  return (\n    <li>\n      <input\n        type=\"text\"\n        name={props.name}\n        placeholder={props.option}\n        // onChange={this.props.handleInputChange}\n      />\n    </li>\n  );\n}\n\nexport default FormItem;\n","import React from 'react';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport FormItem from './FormItem';\n\nclass Form extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleSubmit = (e: any) => {\n    e.preventDefault();\n    const form = document.querySelector('form');\n    const formData = new FormData(form);\n\n    let updatedOptions = [];\n\n    for (let i = 0; i < this.props.optionsArray.length; i++) {\n      updatedOptions.push(formData.get(i.toString()));\n    }\n\n    console.log(updatedOptions);\n  };\n\n  handleInputChange = (e: any) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n\n    console.log(this.props.optionsArray);\n  };\n\n  render() {\n    return (\n      <>\n        <form className=\"form hide\" id=\"form\">\n          <p>Study List</p>\n          <ul>\n            {this.props.optionsArray.map((option, index) => {\n              // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n              return (\n                <FormItem option={option} name={index.toString()} key={index} />\n              );\n            })}\n          </ul>\n\n          <button className=\"add-option-button\" onClick={this.props.addOption}>\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n\n          <button\n            onClick={e => this.props.handleSubmit(e)}\n            className=\"submit-button\"\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Form;\n","export const drawWheel = (ctx: CanvasRenderingContext2D) => {\n  ctx.beginPath();\n  let x = (window.innerWidth - 100) / 2;\n  let y = (window.innerHeight - 100) / 2;\n  let size = y;\n\n  ctx.strokeStyle = '#ffffff';\n  ctx.arc(x, y, size, 0, Math.PI * 2, true);\n  ctx.stroke();\n};\n\nexport const drawPicker = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n) => {\n  ctx.beginPath();\n  let x = (canvas.width - 100) / 2 + (window.innerHeight - 100) / 2 + 50;\n  let y = canvas.height / 2 - 5;\n\n  ctx.fillStyle = '#ffffff';\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + 25, y + 25);\n  ctx.lineTo(x + 25, y - 25);\n  ctx.fill();\n};\n\n//calculate the circles points based on end angle\n// see https://stackoverflow.com/questions/5300938/calculating-the-position-of-points-in-a-circle\nexport const drawLines = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  angle1 = 30,\n  angle2 = 60,\n) => {\n  let x = canvas.width / 2;\n  let y = canvas.height / 2;\n  let r = y;\n\n  angle1 = (-1 * angle1 * Math.PI) / 180;\n  let circleX = x + r * Math.cos(angle1);\n  let circleY = y + r * Math.sin(angle1);\n\n  ctx.strokeStyle = '#ffffff';\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  ctx.lineTo(circleX, circleY);\n  ctx.stroke();\n\n  angle2 = (-1 * angle2 * Math.PI) / 180;\n  circleX = x + r * Math.cos(angle2);\n  circleY = y + r * Math.sin(angle2);\n\n  ctx.strokeStyle = '#ffffff';\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  ctx.lineTo(circleX, circleY);\n  ctx.stroke();\n};\n\nexport const drawText = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  text = 'hello',\n  labelX = 0,\n  angle = 0,\n  color = 'red',\n) => {\n  let x = canvas.width / 2;\n  let y = canvas.height / 2;\n\n  // let textColor = colors[Math.floor(Math.random() * 5)];\n  // ctx.fillStyle = '#ffffff';\n  ctx.fillStyle = color;\n\n  ctx.font = '24px serif';\n  ctx.save();\n  ctx.translate(x, y);\n  ctx.rotate(angle * (-Math.PI / 180));\n  ctx.textAlign = 'center';\n  ctx.fillText(text, labelX, 0);\n  ctx.restore();\n};\n\nexport const spinWheel = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  options: Array<string>,\n  colors: Array<string>,\n) => {\n  let angle = 0;\n  let spins = Math.random() * 1000 + 3000;\n  let wheelSpin: NodeJS.Timeout;\n\n  setTimeout(() => {\n    clearInterval(wheelSpin);\n  }, spins);\n\n  wheelSpin = setInterval(() => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawWheel(ctx);\n    drawOptions(canvas, ctx, options, colors, angle);\n    drawPicker(canvas, ctx);\n    angle += 5;\n    if (angle >= 360) {\n      angle = 0;\n    }\n  }, 10);\n};\n\nexport const drawOptions = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  options: Array<string>,\n  colors: Array<string> = [],\n  startAngle = 0,\n) => {\n  let j = 0;\n  let angle = Math.trunc(360 / options.length);\n  let currentAngle = startAngle;\n  let oldAngle: number;\n\n  for (let i = 1; i < options.length + 1; i++) {\n    oldAngle = currentAngle;\n    currentAngle = i * angle + startAngle;\n    drawLines(canvas, ctx, oldAngle, currentAngle);\n    drawText(\n      canvas,\n      ctx,\n      options[j],\n      120,\n      (currentAngle + oldAngle) / 2,\n      colors[j],\n    );\n    j++;\n  }\n};\n","import React from 'react';\n\nimport Collapse from './Collapse';\nimport Title from './Title';\nimport Form from './Form';\n\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './styles.css';\n\nimport {\n  drawWheel,\n  drawPicker,\n  drawOptions,\n  spinWheel,\n} from './canvasFunctions';\n\nclass App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      options: ['HTML/CSS', 'Vanilla JS', 'React', 'Node', 'Hackerrank'],\n      colors: ['#3FB8AF', '#7FC7AF', '#DAD8A7', '#FF9E9D', '#FF3D7F'],\n      colorOptions: [],\n      test: '',\n    };\n    this.updateAppOptions = this.updateAppOptions.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n\n    //color pallette from here https://codepen.io/dropside/pen/KkLaH\n    let colorArray = [];\n    let newColor = '';\n\n    for (let i = 0; i < this.state.options.length; i++) {\n      newColor = this.state.colors[\n        Math.floor(Math.random() * this.state.colors.length)\n      ];\n      colorArray.push(newColor);\n    }\n\n    this.setState(() => ({ colorOptions: colorArray }));\n  }\n\n  //if options are updated, redraw the canvas\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  //add a new option on to state and wheel\n  addOption = (e: any) => {\n    e.preventDefault();\n    this.setState(() => ({\n      options: [...this.state.options, 'take a break'],\n    }));\n\n    setTimeout(this.draw, 100);\n  };\n\n  handleKeyDown = (event: KeyboardEvent) => {\n    switch (event.keyCode) {\n      case 32: //space key\n        this.spinWheel();\n        console.log('spinning wheel');\n        break;\n      default:\n        break;\n    }\n  };\n\n  //redraw the wheel, options, and picker\n  draw = () => {\n    console.log('redrawing');\n    let canvas = document.querySelector('canvas');\n    let ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth - 100;\n    canvas.height = window.innerHeight - 100;\n\n    drawWheel(ctx);\n    drawPicker(canvas, ctx);\n    drawOptions(\n      canvas,\n      ctx,\n      Object.values(this.state.options),\n      this.state.colors,\n    );\n  };\n\n  updateAppOptions = (optionName: string, optionValue: string) => {\n    let data = this.state.options;\n    data[optionName] = optionValue;\n\n    this.setState(() => ({ options: data }));\n    this.draw();\n  };\n\n  //redraws the wheel to make it appear to spin a minimum of 3+ seconds\n  spinWheel = () => {\n    let canvas = document.querySelector('canvas');\n    let ctx = canvas.getContext('2d');\n    if (this) {\n      spinWheel(\n        canvas,\n        ctx,\n        Object.values(this.state.options),\n        this.state.colors,\n      );\n    }\n  };\n\n  //handle submission of form component to update options\n  handleFormSubmit = (e: any) => {\n    e.preventDefault();\n    const form = document.querySelector('form');\n    const formData = new FormData(form);\n\n    let updatedOptions = [];\n\n    for (let i = 0; i < this.state.options.length; i++) {\n      updatedOptions.push(formData.get(i.toString()));\n    }\n\n    this.setState(() => ({ options: updatedOptions }));\n    this.draw();\n  };\n\n  render() {\n    return (\n      <>\n        <Title title=\"Study Wheel\" />\n        <div className=\"options-menu\">\n          <Collapse>\n            <FontAwesomeIcon icon={faBars} />\n          </Collapse>\n          <Form\n            updateApp={this.updateAppOptions}\n            optionsArray={this.state.options}\n            addOption={this.addOption}\n            handleSubmit={this.handleFormSubmit}\n          />\n        </div>\n        <div className=\"canvas-holder\" onClick={this.spinWheel}>\n          <canvas className=\"canvas\" />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}