{"version":3,"sources":["Collapse.tsx","Title.tsx","FormItem.tsx","Form.tsx","canvasFunctions.tsx","Canvas.tsx","App.tsx","index.tsx"],"names":["showHide","console","log","document","querySelector","classList","toggle","Collapse","props","className","onClick","children","Title","title","FormItem","type","name","placeholder","option","Form","handleSubmit","e","preventDefault","form","formData","FormData","updatedOptions","i","optionsArray","length","push","get","toString","handleInputChange","target","value","setState","state","bind","id","this","map","index","key","addOption","icon","faPlus","React","Component","drawWheel","ctx","beginPath","x","window","innerWidth","y","innerHeight","size","arc","Math","PI","stroke","drawPicker","canvas","width","height","fillStyle","moveTo","lineTo","fill","drawLines","angle1","angle2","r","angle1Calculated","circleX","cos","circleY","sin","strokeStyle","angle2Calculated","drawText","text","labelX","angle","color","font","save","translate","rotate","textAlign","fillText","restore","drawOptions","options","oldAngle","colors","startAngle","j","trunc","currentAngle","Canvas","handleKeyDown","event","keyCode","initialWheelSpin","draw","canvasRef","current","getContext","clearRect","Object","values","wheelSpin","spins","random","setTimeout","clearInterval","setInterval","spinWheel","createRef","addEventListener","ref","App","previousState","updateAppOptions","optionName","optionValue","handleFormSubmit","colorArray","newColor","floor","faBars","updateApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9689fcb5.chunk.js","sourcesContent":["import React from 'react';\n\nconst showHide = () => {\n  console.log('collapsing stuff...');\n  let form = document.querySelector('.form');\n  //   let form = document.getElementById('form');\n  //   let form = document.querySelector<HTMLInputElement>('.form');\n  //   console.log(typeof form);\n  form.classList.toggle('hide');\n  //   form.\n};\n\nfunction Collapse(props: any) {\n  return (\n    <div className=\"collapse\" onClick={showHide}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Collapse;\n","import React from 'react';\n\nfunction Title(props: any) {\n  return <h1 className=\"title\">{props.title}</h1>;\n}\n\nexport default Title;\n","import React from 'react';\n\nfunction FormItem(props) {\n  return (\n    <li>\n      <input\n        type=\"text\"\n        name={props.name}\n        placeholder={props.option}\n        // onChange={this.props.handleInputChange}\n      />\n    </li>\n  );\n}\n\nexport default FormItem;\n","import React from 'react';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport FormItem from './FormItem';\n\nclass Form extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleSubmit = (e: any) => {\n    e.preventDefault();\n    const form = document.querySelector('form');\n    const formData = new FormData(form);\n\n    let updatedOptions = [];\n\n    for (let i = 0; i < this.props.optionsArray.length; i++) {\n      updatedOptions.push(formData.get(i.toString()));\n    }\n\n    console.log(updatedOptions);\n  };\n\n  handleInputChange = (e: any) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n\n    console.log(this.props.optionsArray);\n  };\n\n  render() {\n    return (\n      <>\n        <form className=\"form hide\" id=\"form\">\n          <p>Study List</p>\n          <ul>\n            {this.props.optionsArray.map((option, index) => {\n              // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n              return (\n                <FormItem option={option} name={index.toString()} key={index} />\n              );\n            })}\n          </ul>\n\n          <button className=\"add-option-button\" onClick={this.props.addOption}>\n            <FontAwesomeIcon icon={faPlus} />\n          </button>\n\n          <button\n            onClick={e => this.props.handleSubmit(e)}\n            className=\"submit-button\"\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Form;\n","export const drawWheel = (ctx: CanvasRenderingContext2D) => {\n  ctx.beginPath();\n  const x: number = (window.innerWidth - 100) / 2;\n  const y: number = (window.innerHeight - 100) / 2;\n  const size: number = y;\n\n  // ctx.strokeStyle = '#ffffff';\n  ctx.arc(x, y, size, 0, Math.PI * 2, true);\n  ctx.stroke();\n};\n\n// export const clearCanvas = (ctx: OffscreenCanvasRenderingContext2D) => {\n// ctx.clearRect(0, 0, canvas.width, canvas.height);\n// };\n\nexport const drawPicker = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n) => {\n  ctx.beginPath();\n  const x: number =\n    (canvas.width - 100) / 2 + (window.innerHeight - 100) / 2 + 50;\n  const y: number = canvas.height / 2 - 5;\n\n  ctx.fillStyle = '#ffffff';\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + 25, y + 25);\n  ctx.lineTo(x + 25, y - 25);\n  ctx.fill();\n};\n\n//  calculate the circles points based on end angle\n// see https://stackoverflow.com/questions/5300938/calculating-the-position-of-points-in-a-circle\nexport const drawLines = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  angle1 = 30,\n  angle2 = 60,\n) => {\n  const x: number = canvas.width / 2;\n  const y: number = canvas.height / 2;\n  const r: number = y;\n\n  const angle1Calculated: number = (-1 * angle1 * Math.PI) / 180;\n  let circleX: number = x + r * Math.cos(angle1Calculated);\n  let circleY: number = y + r * Math.sin(angle1Calculated);\n\n  ctx.strokeStyle = '#ffffff';\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  ctx.lineTo(circleX, circleY);\n  ctx.stroke();\n\n  const angle2Calculated = (-1 * angle2 * Math.PI) / 180;\n  circleX = x + r * Math.cos(angle2Calculated);\n  circleY = y + r * Math.sin(angle2Calculated);\n\n  ctx.strokeStyle = '#ffffff';\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  ctx.lineTo(circleX, circleY);\n  ctx.stroke();\n};\n\nexport const drawText = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  text = 'hello',\n  labelX = 0,\n  angle = 0,\n  color = 'red',\n) => {\n  const x: number = canvas.width / 2;\n  const y: number = canvas.height / 2;\n\n  // let textColor = colors[Math.floor(Math.random() * 5)];\n  // ctx.fillStyle = '#ffffff';\n  ctx.fillStyle = color;\n\n  ctx.font = '24px serif';\n  ctx.save();\n  ctx.translate(x, y);\n  ctx.rotate(angle * (-Math.PI / 180));\n  ctx.textAlign = 'center';\n  ctx.fillText(text, labelX, 0);\n  ctx.restore();\n};\n\nexport const drawOptions = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  options: Array<string>,\n  colors: Array<string> = [],\n  startAngle = 0,\n) => {\n  let j: number = 0;\n  const angle: number = Math.trunc(360 / options.length);\n  let currentAngle: number = startAngle;\n  let oldAngle: number;\n\n  for (let i = 1; i < options.length + 1; i++) {\n    oldAngle = currentAngle;\n    currentAngle = i * angle + startAngle;\n    drawLines(canvas, ctx, oldAngle, currentAngle);\n    drawText(\n      canvas,\n      ctx,\n      options[j],\n      120,\n      (currentAngle + oldAngle) / 2,\n      colors[j],\n    );\n    j += 1;\n  }\n};\n\nexport const spinWheel = (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  options: Array<string>,\n  colors: Array<string>,\n) => {\n  let angle: number = 0;\n  const spins: number = Math.random() * 1000 + 3000;\n  let wheelSpin: NodeJS.Timeout;\n\n  setTimeout(() => {\n    clearInterval(wheelSpin);\n  }, spins);\n\n  wheelSpin = setInterval(() => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawWheel(ctx);\n    drawOptions(canvas, ctx, options, colors, angle);\n    drawPicker(canvas, ctx);\n    angle += 5;\n    if (angle >= 360) {\n      angle = 0;\n    }\n  }, 10);\n};\n","import React from 'react';\n\nimport {\n  drawWheel,\n  drawPicker,\n  drawOptions,\n  spinWheel,\n} from './canvasFunctions';\n\nclass Canvas extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasRef: React.createRef(),\n    };\n  }\n\n  componentDidMount(\n    { options, colors } = this.props,\n    { canvasRef } = this.state,\n  ) {\n    const canvas = canvasRef.current;\n    canvas.height = window.innerHeight - 100;\n    canvas.width = window.innerWidth - 100;\n    this.draw(options, colors);\n\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate({ options, colors } = this.props) {\n    this.draw(options, colors);\n  }\n\n  handleKeyDown = (event, { options, colors } = this.props) => {\n    switch (event.keyCode) {\n      case 32: // space key\n        this.initialWheelSpin(options, colors);\n        break;\n      default:\n        break;\n    }\n  };\n\n  //  redraw the wheel, options, and picker\n  draw = (options, colors, { canvasRef } = this.state): void => {\n    const canvas = canvasRef.current;\n\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawWheel(ctx);\n      drawPicker(canvas, ctx);\n      drawOptions(canvas, ctx, Object.values(options), colors);\n    }\n  };\n\n  //  redraws the wheel to make it appear to spin a minimum of 3+ seconds\n  initialWheelSpin = (options, colors) => {\n    const canvas = document.querySelector('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // was getting error line, cannot convert null or undefined to obj, hence if\n    if (this && options) {\n      spinWheel(canvas, ctx, Object.values(options), colors);\n    }\n  };\n\n  render({ canvasRef } = this.state, { options, colors } = this.props) {\n    return (\n      <div>\n        <canvas\n          ref={canvasRef}\n          onClick={() => this.initialWheelSpin(options, colors)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n","import React from 'react';\n\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport Collapse from './Collapse';\nimport Title from './Title';\nimport Form from './Form';\nimport Canvas from './Canvas';\n\nimport './styles.css';\n\n// see this link: https://stackoverflow.com/questions/50630955/react-linter-warning-unused-state-field-while-the-state-field-is-being-used\nclass App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      options: ['HTML/CSS', 'Vanilla JS', 'React', 'Node', 'Hackerrank'],\n      colors: ['#3FB8AF', '#7FC7AF', '#DAD8A7', '#FF9E9D', '#FF3D7F'],\n    };\n    this.updateAppOptions = this.updateAppOptions.bind(this);\n  }\n\n  //  set up and color pallete\n  componentDidMount({ options, colors } = this.state) {\n    //  color pallette from here https://codepen.io/dropside/pen/KkLaH\n    const colorArray = [];\n    let newColor = '';\n\n    for (let i = 0; i < options.length; i++) {\n      newColor = colors[Math.floor(Math.random() * colors.length)];\n      colorArray.push(newColor);\n    }\n\n    this.setState(() => ({ colors: colorArray }));\n  }\n\n  //  add a new option on to state and wheel\n  addOption = (e: any) => {\n    e.preventDefault();\n    this.setState((previousState) => ({\n      options: [...previousState.options, 'take a break'],\n    }));\n  };\n\n  //  Update options with new value\n  updateAppOptions = (optionName: string, optionValue: string): void => {\n    const { options } = this.state;\n    options[optionName] = optionValue;\n    this.setState(() => ({ options }));\n  };\n\n  //  handle submission of form component to update options\n  handleFormSubmit = (e: any, { options } = this.state): void => {\n    e.preventDefault();\n    const form = document.querySelector('form');\n    const formData = new FormData(form);\n    const updatedOptions = [];\n\n    for (let i = 0; i < options.length; i += 1) {\n      updatedOptions.push(formData.get(i.toString()));\n    }\n\n    this.setState(() => ({ options: updatedOptions }));\n    // this.draw();:\n  };\n\n  render({ options, colors } = this.state) {\n    return (\n      <>\n        <Title title=\"Study Wheel\" />\n        <div className=\"options-menu\">\n          <Collapse>\n            <FontAwesomeIcon icon={faBars} />\n          </Collapse>\n          <Form\n            updateApp={this.updateAppOptions}\n            optionsArray={options}\n            addOption={this.addOption}\n            handleSubmit={this.handleFormSubmit}\n          />\n        </div>\n        <Canvas options={options} colors={colors} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}